// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RasmusAB.Models;

#nullable disable

namespace RasmusAB.Migrations
{
    [DbContext(typeof(RasmusABContext))]
    partial class RasmusABContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RasmusAB.Models.Användare", b =>
                {
                    b.Property<int>("AnvändareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnvändareId"), 1L, 1);

                    b.Property<bool>("Admin")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Land")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Namn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telefonnummer")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnvändareId");

                    b.ToTable("Användare");
                });

            modelBuilder.Entity("RasmusAB.Models.Kategori", b =>
                {
                    b.Property<int>("KategoriId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KategoriId"), 1L, 1);

                    b.Property<string>("Namn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KategoriId");

                    b.ToTable("Kategorier");
                });

            modelBuilder.Entity("RasmusAB.Models.Leverantör", b =>
                {
                    b.Property<int>("LeverantörId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeverantörId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("LeverantörId");

                    b.ToTable("Leverantörer");
                });

            modelBuilder.Entity("RasmusAB.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<string>("BetalningsUppgifter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LeverantörId")
                        .HasColumnType("int");

                    b.Property<double>("Moms")
                        .HasColumnType("float");

                    b.Property<bool>("Slutbetald")
                        .HasColumnType("bit");

                    b.Property<int>("Summa")
                        .HasColumnType("int");

                    b.Property<int>("VarukorgId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("LeverantörId");

                    b.HasIndex("VarukorgId")
                        .IsUnique();

                    b.ToTable("Ordrar");
                });

            modelBuilder.Entity("RasmusAB.Models.Produkt", b =>
                {
                    b.Property<int>("ProduktId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProduktId"), 1L, 1);

                    b.Property<int>("Antal")
                        .HasColumnType("int");

                    b.Property<string>("Färg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KategoriId")
                        .HasColumnType("int");

                    b.Property<string>("Namn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pris")
                        .HasColumnType("int");

                    b.HasKey("ProduktId");

                    b.HasIndex("KategoriId");

                    b.ToTable("Produkter");
                });

            modelBuilder.Entity("RasmusAB.Models.Varukorg", b =>
                {
                    b.Property<int>("VarukorgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VarukorgId"), 1L, 1);

                    b.Property<int>("AnvändareId")
                        .HasColumnType("int");

                    b.Property<bool>("Slutbetald")
                        .HasColumnType("bit");

                    b.HasKey("VarukorgId");

                    b.HasIndex("AnvändareId");

                    b.ToTable("Varukorgar");
                });

            modelBuilder.Entity("RasmusAB.Models.Varukorgsprodukt", b =>
                {
                    b.Property<int>("VarukorgsproduktId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VarukorgsproduktId"), 1L, 1);

                    b.Property<int>("Antal")
                        .HasColumnType("int");

                    b.Property<int>("ProduktId")
                        .HasColumnType("int");

                    b.Property<int>("VarukorgId")
                        .HasColumnType("int");

                    b.HasKey("VarukorgsproduktId");

                    b.HasIndex("ProduktId");

                    b.HasIndex("VarukorgId");

                    b.ToTable("Varukorgsprodukter");
                });

            modelBuilder.Entity("RasmusAB.Models.Order", b =>
                {
                    b.HasOne("RasmusAB.Models.Leverantör", "Leverantör")
                        .WithMany("Orders")
                        .HasForeignKey("LeverantörId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RasmusAB.Models.Varukorg", null)
                        .WithOne("Order")
                        .HasForeignKey("RasmusAB.Models.Order", "VarukorgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leverantör");
                });

            modelBuilder.Entity("RasmusAB.Models.Produkt", b =>
                {
                    b.HasOne("RasmusAB.Models.Kategori", "Kategori")
                        .WithMany("Produkter")
                        .HasForeignKey("KategoriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kategori");
                });

            modelBuilder.Entity("RasmusAB.Models.Varukorg", b =>
                {
                    b.HasOne("RasmusAB.Models.Användare", "Användare")
                        .WithMany("Varukorgar")
                        .HasForeignKey("AnvändareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Användare");
                });

            modelBuilder.Entity("RasmusAB.Models.Varukorgsprodukt", b =>
                {
                    b.HasOne("RasmusAB.Models.Produkt", "Produkt")
                        .WithMany("Varukorgsprodukter")
                        .HasForeignKey("ProduktId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RasmusAB.Models.Varukorg", null)
                        .WithMany("Varukorgsprodukter")
                        .HasForeignKey("VarukorgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produkt");
                });

            modelBuilder.Entity("RasmusAB.Models.Användare", b =>
                {
                    b.Navigation("Varukorgar");
                });

            modelBuilder.Entity("RasmusAB.Models.Kategori", b =>
                {
                    b.Navigation("Produkter");
                });

            modelBuilder.Entity("RasmusAB.Models.Leverantör", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("RasmusAB.Models.Produkt", b =>
                {
                    b.Navigation("Varukorgsprodukter");
                });

            modelBuilder.Entity("RasmusAB.Models.Varukorg", b =>
                {
                    b.Navigation("Order")
                        .IsRequired();

                    b.Navigation("Varukorgsprodukter");
                });
#pragma warning restore 612, 618
        }
    }
}
